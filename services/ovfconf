#!/bin/bash

if [[ ! -z $1 ]]; then
  # test run
  #PREFIX=$(dirname $0)
  #PREFIX=$(pwd)
  PREFIX=.
  OVF_FILE=$PREFIX/ovfEnv.xml
  LOG_FILE=$PREFIX/ovfconf.log
  ETC=$PREFIX/etc
else
  # probably
  OVF_FILE=/tmp/ovfEnv.xml
  LOG_FILE=/tmp/ovfconf.log
  ETC=/etc
fi

RPCTOOL=/usr/bin/vmware-rpctool
if [[ ! -x $RPCTOOL ]]; then
  RPCTOOL=/usr/lib/vmware-tools/sbin/vmware-rpctool
fi

log_msg() {
  local msg=$1
  if [[ -z $LOG_JUST_PRINT || $LOG_JUST_PRINT == "no" ]]; then
    echo "`date \"+%b %d %T\"` $msg"
  else
    echo $msg
  fi
  if [[ ! -z $LOG_FILE ]]; then
    echo "`date \"+%b %d %T\"` $msg" >> $LOG_FILE
  fi
}

get_ovf_xml() {
  local file_name=$1
  rm $OVF_FILE >/dev/null 2>&1
  if [[ ! -z $file_name && -e $file_name ]]; then
    cp $file_name $OVF_FILE
  else
    if [[ ! -x $RPCTOOL ]]; then
      log_msg "ERROR: no vmware-rpctool found and no file given, cannot get OVF env"
      return 1
    fi
    $RPCTOOL 'info-get guestinfo.ovfEnv' > $OVF_FILE 2>/dev/null
  fi
  touch $OVF_FILE
  if [[ $(wc -l $OVF_FILE | awk '{print $1}') != 0 ]]; then
    log_msg "NOTE: got OVF file"
    return 0
  else
    log_msg "ERROR: no OVF environment found"
    rm $OVF_FILE
    return 1
  fi
}

get_ovf_var() {
  export KEY=$1 && perl -ne 'print "$1\n" if /<Property \S+.key="$ENV{"KEY"}" \S+:value="([^"]+)"\/>/' $OVF_FILE | tr -d ' '
}

if [[ ! -z $LOG_FILE ]]; then
  rm $LOG_FILE >/dev/null 2>&1
  touch $LOG_FILE
fi

export resolv_conf="$ETC/resolv.conf"

export sshd_conf="$ETC/ssh/sshd_config"
export netcfg_path="sysconfig/network-scripts"
export hostname_conf="$ETC/hostname"
export if0=$(ls $ETC/$netcfg_path/ifcfg-* | perl -ane 'if (/ifcfg-(?!lo)(\S+)/) {print $1; exit 0}')
export iface_conf="$ETC/$netcfg_path/ifcfg-$if0"
export route_conf=""
export ntp_conf="$ETC/chrony.conf"
export ERASE_SSH_KEYS="check"
export CLEAN_IFACE_MAC="yes"
export LOG_JUST_PRINT="yes"

export old_hostname=$(cat $hostname_conf | cut -d. -f1)
export old_domain=$(cat $hostname_conf | cut -d. -f2-)
export old_ip=$(cat $iface_conf | perl -ne 'print $2 if /IPADDR=(\W?)([0-9.]+)/')
export old_prefix=$(cat $iface_conf | perl -ne 'print $2 if /PREFIX=(\W?)([0-9.]+)/')

if [[ ! -z $route_conf ]]; then
  export old_gw=$(cat $route_conf | grep 'default' | cut -d' ' -f2)
else
  export old_gw=$(cat $iface_conf | perl -ne 'print $2 if /GATEWAY=(\W?)([0-9.]+)/')
fi

export old_dns=$(cat $resolv_conf | awk '/^nameserver / {print $2}' | paste -sd ',')
export old_ntp=$(cat $ntp_conf | awk '/^server / {print $2}' | paste -sd ',')

export old_iface_mac=$(awk -F= '/HWADDR/ {print $2}' $iface_conf)

if [[ "X$old_hostname" == "X" || "X$old_ip" == "X" ]]; then
  log_msg "ERROR: old hostname or ip missed (something is wrong), exiting"
  exit 1
fi

get_ovf_xml $1
if [[ $? == 1 ]]; then
  rm $LOG_FILE >/dev/null 2>&1
  exit 0
fi

export_source_vars() {
  echo "export new_ntp=\"$new_ntp\"" > $1
  echo "export rhs_user=\"$rhs_user\"" >> $1
  echo "export rhs_pass=\"$rhs_pass\"" >> $1
  echo "export openshift_version=\"$openshift_version\"" >> $1
  echo "export repourl=\"$repourl\"" >> $1
  echo "export branch=\"$branch\"" >> $1
  echo "export user=\"$user\"" >> $1
}

set_new_hostname() {
  new_domain=${new_domain:-$old_domain}
  
  log_msg "NOTE: changing hostname to $new_hostname.$new_domain";
  
  log_msg "INFO:  setting hostname"
  hostname "$new_hostname.$new_domain"

  log_msg "INFO:  changing $ETC/hosts"
cat > $ETC/hosts <<EOF
127.0.0.1      localhost
$new_ip        $new_hostname $new_hostname.$new_domain
EOF

log_msg "INFO:  changing $hostname_conf"
echo "$new_hostname.$new_domain" > $hostname_conf

log_msg "INFO:  changing root name in $ETC/passwd"
perl -pi -e 's/^root:x:0:0:[^:]+:/root:x:0:0:root\@$ENV{new_hostname}:/' $ETC/passwd
}

set_new_network_parameters() {
  if [ $old_ip != $new_ip ]; then
    log_msg "NOTE: chainging main ip to $new_ip"
    log_msg "INFO:  changing $if0 config"
    perl -pi -e 's/IPADDR=(\W?)[0-9.]+/IPADDR=\1$ENV{new_ip}/' $iface_conf
    if [[ ! -z $CLEAN_IFACE_MAC && $CLEAN_IFACE_MAC == "yes" && ! -z $old_iface_mac ]]; then
      log_msg "INFO:  cleaning old MAC from iface config"
      perl -ni -e 'print unless /^HWADDR/' $iface_conf
    fi
    if [[ $(grep -c -E "ListenAddress $old_ip" $sshd_conf) != "0" ]]; then
      log_msg "INFO:  changing ip in sshd config"
      perl -pi -e 's/^ListenAddress .*/ListenAddress $ENV{new_ip}/' $sshd_conf
    fi
    if [[ ! -z $ERASE_SSH_KEYS && $ERASE_SSH_KEYS != 'no' ]]; then
      log_msg "INFO: erasing ssh keys to rebuild them"
      if [[ $ERASE_SSH_KEYS == "check" ]]; then
        if [[ $(grep -c '^AUTOCREATE' /etc/sysconfig/sshd) == 1 ]]; then
          rm $ETC/ssh/ssh_host_*_key*
        fi
      else
        rm $ETC/ssh/ssh_host_*_key*
      fi
    fi
  fi
  if [ $old_prefix != $new_prefix ]; then
    log_msg "NOTE: chainging prefix to $new_prefix"
    log_msg "INFO:  changing $if0 config"
    perl -pi -e 's/PREFIX=(\W?)([0-9.]+)/PREFIX=\1$ENV{new_prefix}/' $iface_conf
  fi
  if [[ ! -z $new_gw && $new_gw != $old_gw ]]; then
    log_msg "NOTE: changing gateway address to $new_gw"
    if [[ ! -z $route_conf ]]; then
      echo "default $new_gw - -" > $route_conf
    else
      perl -pi -e 's/^GATEWAY=.*/GATEWAY=$ENV{new_gw}/' $iface_conf
    fi
  fi
}

set_new_dns() {
  new_dns1=$(echo $new_dns | awk -F"[, ;]+" '{print $1}')
  new_dns2=$(echo $new_dns | awk -F"[, ;]+" '{print $2}')
  log_msg "NOTE: setting $resolv_conf DNS to $new_dns"
  echo "domain $new_domain"   >  $resolv_conf
  echo "search cluster.local $new_domain"   >> $resolv_conf
  echo "nameserver $new_dns1" >> $resolv_conf
  if [[ ! -z $new_dns2 ]]; then
    echo "nameserver $new_dns2" >> $resolv_conf
  fi
  if [[ $(grep -c -E "^DNS" $iface_conf) != "0" ]]; then
    rm /tmp/iface_conf >/dev/null 2>&1
    touch /tmp/iface_conf
    grep -v -E "^DNS" $iface_conf > /tmp/iface_conf
    echo "DNS1=$new_dns1" >> /tmp/iface_conf
    if [[ ! -z $new_dns2 ]]; then
      echo "DNS2=$new_dns2" >> /tmp/iface_conf
    fi
    cp /tmp/iface_conf $iface_conf
    rm /tmp/iface_conf
  fi
}

set_new_ntp() {
  new_ntp1=$(echo $new_ntp | awk -F"[, ;]+" '{print $1}')
  new_ntp2=$(echo $new_ntp | awk -F"[, ;]+" '{print $2}')
  log_msg "NOTE: setting $ntp_conf for $new_ntp"
  rm /tmp/ntpconf >/dev/null 2>&1
  touch /tmp/ntpconf
  grep -v -E '^server ' $ntp_conf > /tmp/ntpconf
  echo "server $new_ntp1 iburst" >> /tmp/ntpconf
  if [[ ! -z $new_ntp2 ]]; then
    echo "server $new_ntp2 iburst" >> /tmp/ntpconf
  fi
  cp /tmp/ntpconf $ntp_conf
  rm /tmp/ntpconf
}

check_current() {
  export cur_hostname=$(cat $hostname_conf | cut -d. -f1)
  export cur_domain=$(cat $hostname_conf | cut -d. -f2-)
  export cur_ip=$(cat $iface_conf | perl -ne 'print $2 if /IPADDR=(\W?)([0-9.]+)/')
  export cur_prefix=$(cat $iface_conf | perl -ne 'print $2 if /PREFIX=(\W?)([0-9.]+)/')
  if [[ ! -z $route_conf ]]; then
    export cur_gw=$(cat $route_conf | grep 'default' | cut -d' ' -f2)
  else
    export cur_gw=$(cat $iface_conf | perl -ne 'print $2 if /GATEWAY=(\W?)([0-9.]+)/')
  fi
  export cur_dns=$(cat $resolv_conf | awk '/^nameserver / {print $2}' | paste -sd ',')
  export cur_ntp=$(cat $ntp_conf | awk '/^server / {print $2}' | paste -sd ',')

  log_msg "INFO: cur name: $cur_hostname.$cur_domain"
  log_msg "INFO: cur ip/prefix:   $cur_ip/$cur_prefix, gw: $cur_gw"
  log_msg "INFO: cur dns:  $cur_dns"
  log_msg "INFO: cur ntp:  $cur_ntp"
}

export new_hostname=$(get_ovf_var "hostname")
export new_domain=$(get_ovf_var "domain")
export new_ip=$(get_ovf_var "ip")
export new_prefix=$(get_ovf_var "prefix")
export new_gw=$(get_ovf_var "gateway")
export new_dns=$(get_ovf_var "dns")
export new_ntp=$(get_ovf_var "ntp")
export rhs_user=$(get_ovf_var "rhs_user")
export rhs_pass=$(get_ovf_var "rhs_pass")
export openshift_version=$(get_ovf_var "openshift_version")
export branch=$(get_ovf_var "branch")
export repourl=$(get_ovf_var "repourl")
export user=$(get_ovf_var "user")

log_msg "INFO: old name: $old_hostname.$old_domain"
log_msg "INFO: old ip/prefix:   $old_ip/$old_prefix, gw: $old_gw"
log_msg "INFO: old dns:  $old_dns"
log_msg "INFO: old ntp:  $old_ntp"
log_msg "INFO: new name: $new_hostname.$new_domain"
log_msg "INFO: new ip/prefix:   $new_ip/$new_prefix, gw: $new_gw"
[[ ! -z $new_dns ]] && log_msg "INFO: new dns:  $new_dns"
[[ ! -z $new_ntp ]] && log_msg "INFO: new ntp:  $new_ntp"

export_source_vars /tmp/source_vars

[ $old_ip != $new_ip ] || [ $old_gw != $new_gw ] || [ $old_prefix != $new_prefix ] && set_new_network_parameters
[ $old_hostname != $new_hostname ] && set_new_hostname
if [[ $new_domain != $old_domain || (! -z $new_dns && $new_dns != $old_dns) ]]; then
  set_new_dns
fi

if [[ ! -z $new_ntp && $new_ntp != $old_ntp ]]; then
  set_new_ntp
fi

check_current
